{"version":3,"sources":["webpack:///static/js/21.9664f7bba9f82eb830f0.js","webpack:///./src/components/imgTest.vue?9d04","webpack:///./~/_exif-js@2.2.1@exif-js/exif.js?3dc2*","webpack:///./src/components/imgTest.vue","webpack:///./src/components/imgTest.vue?e062","webpack:///./src/components/imgTest.vue?e25c","webpack:///./src/components/imgTest.vue?3f6f"],"names":["webpackJsonp","167","module","exports","__webpack_require__","injectStyle","ssrContext","Component","268","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","imageHasData","img","base64ToArrayBuffer","base64","contentType","match","replace","binary","atob","len","length","buffer","ArrayBuffer","view","Uint8Array","i","charCodeAt","objectURLToBlob","url","callback","http","XMLHttpRequest","open","responseType","onload","e","this","status","response","send","getImageData","handleBinaryFile","binFile","data","findEXIFinJPEG","iptcdata","findIPTCinJPEG","xmpdata","findXMPinJPEG","exifdata","call","src","test","arrayBuffer","fileReader","FileReader","target","result","blob","readAsArrayBuffer","self","Blob","File","debug","console","log","byteLength","file","dataView","DataView","getUint8","marker","offset","readEXIFData","getUint16","nameHeaderLength","readIPTCData","startOffset","sectionLength","fieldValue","fieldName","dataSize","segmentType","segmentStartPos","IptcFieldMap","getInt16","getStringFromDB","hasOwnProperty","Array","push","readTags","tiffStart","dirStart","strings","bigEnd","entryOffset","tag","entries","tags","readTagValue","vals","val","n","numerator","denominator","type","numValues","getUint32","valueOffset","Number","getInt32","getNextIFDOffset","readThumbnailImage","firstIFDOffset","IFD1OffsetPointer","thumbTags","IFD1Tags","JpegIFOffset","JpegIFByteCount","tOffset","tLength","start","outstr","String","fromCharCode","exifData","gpsData","tiffOffset","TiffTags","ExifIFDPointer","ExifTags","StringValues","Components","GPSInfoIFDPointer","GPSTags","dom","DOMParser","xmpString","xmpEndIndex","indexOf","substring","indexOfXmp","slice","xml2Object","parseFromString","xml","obj","children","item","attributes","idx","itemAtt","dataKey","nodeName","dataValue","nodeValue","undefined","xml2json","old","textContent","message","EXIF","EXIFwrapped","Tags","36864","40960","40961","40962","40963","37121","37122","37500","37510","40964","36867","36868","37520","37521","37522","33434","33437","34850","34852","34855","34856","37377","37378","37379","37380","37381","37382","37383","37384","37385","37396","37386","41483","41484","41486","41487","41488","41492","41493","41495","41728","41729","41730","41985","41986","41987","41988","41989","41990","41991","41992","41993","41994","41995","41996","40965","42016","256","257","34665","34853","258","259","262","274","277","284","530","531","282","283","296","273","278","279","513","514","301","318","319","529","532","306","270","271","272","305","315","33432","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","ExposureProgram","MeteringMode","255","LightSource","Flash","31","32","65","69","71","73","77","79","89","93","95","SensingMethod","SceneCaptureType","SceneType","CustomRendered","WhiteBalance","GainControl","Contrast","Saturation","Sharpness","SubjectDistanceRange","FileSource","120","110","55","80","85","122","105","116","getData","Image","HTMLImageElement","complete","getTag","getIptcTag","getAllTags","a","getAllIptcTags","pretty","strPretty","readFromBinaryFile","apply","353","__webpack_exports__","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0_exif_js__","__WEBPACK_IMPORTED_MODULE_0_exif_js___default","headerImage","picValue","mounted","methods","upload","files","dataTransfer","imgPreview","Orientation","window","reader","readAsDataURL","onloadend","postImg","compress","rotateImg","direction","canvas","height","width","step","degree","Math","PI","ctx","getContext","drawImage","rotate","document","createElement","tCanvas","tctx","initSize","ratio","sqrt","fillStyle","fillRect","count","nw","nh","j","ndata","toDataURL","376","version","sources","names","mappings","sourcesContent","sourceRoot","405","content","locals","434","render","_vm","_h","$createElement","_c","_self","staticStyle","padding","staticClass","style","_v","margin-top","attrs","id","multiple","accept","on","change","for","staticRenderFns"],"mappings":"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","file":"static/js/21.9664f7bba9f82eb830f0.js","sourcesContent":["webpackJsonp([21],{\n\n/***/ 167:\n/***/ (function(module, exports, __webpack_require__) {\n\nfunction injectStyle (ssrContext) {\n  __webpack_require__(405)\n}\nvar Component = __webpack_require__(4)(\n  /* script */\n  __webpack_require__(353),\n  /* template */\n  __webpack_require__(434),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 268:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function() {\n\n    var debug = false;\n\n    var root = this;\n\n    var EXIF = function(obj) {\n        if (obj instanceof EXIF) return obj;\n        if (!(this instanceof EXIF)) return new EXIF(obj);\n        this.EXIFwrapped = obj;\n    };\n\n    if (true) {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = EXIF;\n        }\n        exports.EXIF = EXIF;\n    } else {\n        root.EXIF = EXIF;\n    }\n\n    var ExifTags = EXIF.Tags = {\n\n        // version tags\n        0x9000 : \"ExifVersion\",             // EXIF version\n        0xA000 : \"FlashpixVersion\",         // Flashpix format version\n\n        // colorspace tags\n        0xA001 : \"ColorSpace\",              // Color space information tag\n\n        // image configuration\n        0xA002 : \"PixelXDimension\",         // Valid width of meaningful image\n        0xA003 : \"PixelYDimension\",         // Valid height of meaningful image\n        0x9101 : \"ComponentsConfiguration\", // Information about channels\n        0x9102 : \"CompressedBitsPerPixel\",  // Compressed bits per pixel\n\n        // user information\n        0x927C : \"MakerNote\",               // Any desired information written by the manufacturer\n        0x9286 : \"UserComment\",             // Comments by user\n\n        // related file\n        0xA004 : \"RelatedSoundFile\",        // Name of related sound file\n\n        // date and time\n        0x9003 : \"DateTimeOriginal\",        // Date and time when the original image was generated\n        0x9004 : \"DateTimeDigitized\",       // Date and time when the image was stored digitally\n        0x9290 : \"SubsecTime\",              // Fractions of seconds for DateTime\n        0x9291 : \"SubsecTimeOriginal\",      // Fractions of seconds for DateTimeOriginal\n        0x9292 : \"SubsecTimeDigitized\",     // Fractions of seconds for DateTimeDigitized\n\n        // picture-taking conditions\n        0x829A : \"ExposureTime\",            // Exposure time (in seconds)\n        0x829D : \"FNumber\",                 // F number\n        0x8822 : \"ExposureProgram\",         // Exposure program\n        0x8824 : \"SpectralSensitivity\",     // Spectral sensitivity\n        0x8827 : \"ISOSpeedRatings\",         // ISO speed rating\n        0x8828 : \"OECF\",                    // Optoelectric conversion factor\n        0x9201 : \"ShutterSpeedValue\",       // Shutter speed\n        0x9202 : \"ApertureValue\",           // Lens aperture\n        0x9203 : \"BrightnessValue\",         // Value of brightness\n        0x9204 : \"ExposureBias\",            // Exposure bias\n        0x9205 : \"MaxApertureValue\",        // Smallest F number of lens\n        0x9206 : \"SubjectDistance\",         // Distance to subject in meters\n        0x9207 : \"MeteringMode\",            // Metering mode\n        0x9208 : \"LightSource\",             // Kind of light source\n        0x9209 : \"Flash\",                   // Flash status\n        0x9214 : \"SubjectArea\",             // Location and area of main subject\n        0x920A : \"FocalLength\",             // Focal length of the lens in mm\n        0xA20B : \"FlashEnergy\",             // Strobe energy in BCPS\n        0xA20C : \"SpatialFrequencyResponse\",    //\n        0xA20E : \"FocalPlaneXResolution\",   // Number of pixels in width direction per FocalPlaneResolutionUnit\n        0xA20F : \"FocalPlaneYResolution\",   // Number of pixels in height direction per FocalPlaneResolutionUnit\n        0xA210 : \"FocalPlaneResolutionUnit\",    // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution\n        0xA214 : \"SubjectLocation\",         // Location of subject in image\n        0xA215 : \"ExposureIndex\",           // Exposure index selected on camera\n        0xA217 : \"SensingMethod\",           // Image sensor type\n        0xA300 : \"FileSource\",              // Image source (3 == DSC)\n        0xA301 : \"SceneType\",               // Scene type (1 == directly photographed)\n        0xA302 : \"CFAPattern\",              // Color filter array geometric pattern\n        0xA401 : \"CustomRendered\",          // Special processing\n        0xA402 : \"ExposureMode\",            // Exposure mode\n        0xA403 : \"WhiteBalance\",            // 1 = auto white balance, 2 = manual\n        0xA404 : \"DigitalZoomRation\",       // Digital zoom ratio\n        0xA405 : \"FocalLengthIn35mmFilm\",   // Equivalent foacl length assuming 35mm film camera (in mm)\n        0xA406 : \"SceneCaptureType\",        // Type of scene\n        0xA407 : \"GainControl\",             // Degree of overall image gain adjustment\n        0xA408 : \"Contrast\",                // Direction of contrast processing applied by camera\n        0xA409 : \"Saturation\",              // Direction of saturation processing applied by camera\n        0xA40A : \"Sharpness\",               // Direction of sharpness processing applied by camera\n        0xA40B : \"DeviceSettingDescription\",    //\n        0xA40C : \"SubjectDistanceRange\",    // Distance to subject\n\n        // other tags\n        0xA005 : \"InteroperabilityIFDPointer\",\n        0xA420 : \"ImageUniqueID\"            // Identifier assigned uniquely to each image\n    };\n\n    var TiffTags = EXIF.TiffTags = {\n        0x0100 : \"ImageWidth\",\n        0x0101 : \"ImageHeight\",\n        0x8769 : \"ExifIFDPointer\",\n        0x8825 : \"GPSInfoIFDPointer\",\n        0xA005 : \"InteroperabilityIFDPointer\",\n        0x0102 : \"BitsPerSample\",\n        0x0103 : \"Compression\",\n        0x0106 : \"PhotometricInterpretation\",\n        0x0112 : \"Orientation\",\n        0x0115 : \"SamplesPerPixel\",\n        0x011C : \"PlanarConfiguration\",\n        0x0212 : \"YCbCrSubSampling\",\n        0x0213 : \"YCbCrPositioning\",\n        0x011A : \"XResolution\",\n        0x011B : \"YResolution\",\n        0x0128 : \"ResolutionUnit\",\n        0x0111 : \"StripOffsets\",\n        0x0116 : \"RowsPerStrip\",\n        0x0117 : \"StripByteCounts\",\n        0x0201 : \"JPEGInterchangeFormat\",\n        0x0202 : \"JPEGInterchangeFormatLength\",\n        0x012D : \"TransferFunction\",\n        0x013E : \"WhitePoint\",\n        0x013F : \"PrimaryChromaticities\",\n        0x0211 : \"YCbCrCoefficients\",\n        0x0214 : \"ReferenceBlackWhite\",\n        0x0132 : \"DateTime\",\n        0x010E : \"ImageDescription\",\n        0x010F : \"Make\",\n        0x0110 : \"Model\",\n        0x0131 : \"Software\",\n        0x013B : \"Artist\",\n        0x8298 : \"Copyright\"\n    };\n\n    var GPSTags = EXIF.GPSTags = {\n        0x0000 : \"GPSVersionID\",\n        0x0001 : \"GPSLatitudeRef\",\n        0x0002 : \"GPSLatitude\",\n        0x0003 : \"GPSLongitudeRef\",\n        0x0004 : \"GPSLongitude\",\n        0x0005 : \"GPSAltitudeRef\",\n        0x0006 : \"GPSAltitude\",\n        0x0007 : \"GPSTimeStamp\",\n        0x0008 : \"GPSSatellites\",\n        0x0009 : \"GPSStatus\",\n        0x000A : \"GPSMeasureMode\",\n        0x000B : \"GPSDOP\",\n        0x000C : \"GPSSpeedRef\",\n        0x000D : \"GPSSpeed\",\n        0x000E : \"GPSTrackRef\",\n        0x000F : \"GPSTrack\",\n        0x0010 : \"GPSImgDirectionRef\",\n        0x0011 : \"GPSImgDirection\",\n        0x0012 : \"GPSMapDatum\",\n        0x0013 : \"GPSDestLatitudeRef\",\n        0x0014 : \"GPSDestLatitude\",\n        0x0015 : \"GPSDestLongitudeRef\",\n        0x0016 : \"GPSDestLongitude\",\n        0x0017 : \"GPSDestBearingRef\",\n        0x0018 : \"GPSDestBearing\",\n        0x0019 : \"GPSDestDistanceRef\",\n        0x001A : \"GPSDestDistance\",\n        0x001B : \"GPSProcessingMethod\",\n        0x001C : \"GPSAreaInformation\",\n        0x001D : \"GPSDateStamp\",\n        0x001E : \"GPSDifferential\"\n    };\n\n     // EXIF 2.3 Spec\n    var IFD1Tags = EXIF.IFD1Tags = {\n        0x0100: \"ImageWidth\",\n        0x0101: \"ImageHeight\",\n        0x0102: \"BitsPerSample\",\n        0x0103: \"Compression\",\n        0x0106: \"PhotometricInterpretation\",\n        0x0111: \"StripOffsets\",\n        0x0112: \"Orientation\",\n        0x0115: \"SamplesPerPixel\",\n        0x0116: \"RowsPerStrip\",\n        0x0117: \"StripByteCounts\",\n        0x011A: \"XResolution\",\n        0x011B: \"YResolution\",\n        0x011C: \"PlanarConfiguration\",\n        0x0128: \"ResolutionUnit\",\n        0x0201: \"JpegIFOffset\",    // When image format is JPEG, this value show offset to JPEG data stored.(aka \"ThumbnailOffset\" or \"JPEGInterchangeFormat\")\n        0x0202: \"JpegIFByteCount\", // When image format is JPEG, this value shows data size of JPEG image (aka \"ThumbnailLength\" or \"JPEGInterchangeFormatLength\")\n        0x0211: \"YCbCrCoefficients\",\n        0x0212: \"YCbCrSubSampling\",\n        0x0213: \"YCbCrPositioning\",\n        0x0214: \"ReferenceBlackWhite\"\n    };\n\n    var StringValues = EXIF.StringValues = {\n        ExposureProgram : {\n            0 : \"Not defined\",\n            1 : \"Manual\",\n            2 : \"Normal program\",\n            3 : \"Aperture priority\",\n            4 : \"Shutter priority\",\n            5 : \"Creative program\",\n            6 : \"Action program\",\n            7 : \"Portrait mode\",\n            8 : \"Landscape mode\"\n        },\n        MeteringMode : {\n            0 : \"Unknown\",\n            1 : \"Average\",\n            2 : \"CenterWeightedAverage\",\n            3 : \"Spot\",\n            4 : \"MultiSpot\",\n            5 : \"Pattern\",\n            6 : \"Partial\",\n            255 : \"Other\"\n        },\n        LightSource : {\n            0 : \"Unknown\",\n            1 : \"Daylight\",\n            2 : \"Fluorescent\",\n            3 : \"Tungsten (incandescent light)\",\n            4 : \"Flash\",\n            9 : \"Fine weather\",\n            10 : \"Cloudy weather\",\n            11 : \"Shade\",\n            12 : \"Daylight fluorescent (D 5700 - 7100K)\",\n            13 : \"Day white fluorescent (N 4600 - 5400K)\",\n            14 : \"Cool white fluorescent (W 3900 - 4500K)\",\n            15 : \"White fluorescent (WW 3200 - 3700K)\",\n            17 : \"Standard light A\",\n            18 : \"Standard light B\",\n            19 : \"Standard light C\",\n            20 : \"D55\",\n            21 : \"D65\",\n            22 : \"D75\",\n            23 : \"D50\",\n            24 : \"ISO studio tungsten\",\n            255 : \"Other\"\n        },\n        Flash : {\n            0x0000 : \"Flash did not fire\",\n            0x0001 : \"Flash fired\",\n            0x0005 : \"Strobe return light not detected\",\n            0x0007 : \"Strobe return light detected\",\n            0x0009 : \"Flash fired, compulsory flash mode\",\n            0x000D : \"Flash fired, compulsory flash mode, return light not detected\",\n            0x000F : \"Flash fired, compulsory flash mode, return light detected\",\n            0x0010 : \"Flash did not fire, compulsory flash mode\",\n            0x0018 : \"Flash did not fire, auto mode\",\n            0x0019 : \"Flash fired, auto mode\",\n            0x001D : \"Flash fired, auto mode, return light not detected\",\n            0x001F : \"Flash fired, auto mode, return light detected\",\n            0x0020 : \"No flash function\",\n            0x0041 : \"Flash fired, red-eye reduction mode\",\n            0x0045 : \"Flash fired, red-eye reduction mode, return light not detected\",\n            0x0047 : \"Flash fired, red-eye reduction mode, return light detected\",\n            0x0049 : \"Flash fired, compulsory flash mode, red-eye reduction mode\",\n            0x004D : \"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected\",\n            0x004F : \"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected\",\n            0x0059 : \"Flash fired, auto mode, red-eye reduction mode\",\n            0x005D : \"Flash fired, auto mode, return light not detected, red-eye reduction mode\",\n            0x005F : \"Flash fired, auto mode, return light detected, red-eye reduction mode\"\n        },\n        SensingMethod : {\n            1 : \"Not defined\",\n            2 : \"One-chip color area sensor\",\n            3 : \"Two-chip color area sensor\",\n            4 : \"Three-chip color area sensor\",\n            5 : \"Color sequential area sensor\",\n            7 : \"Trilinear sensor\",\n            8 : \"Color sequential linear sensor\"\n        },\n        SceneCaptureType : {\n            0 : \"Standard\",\n            1 : \"Landscape\",\n            2 : \"Portrait\",\n            3 : \"Night scene\"\n        },\n        SceneType : {\n            1 : \"Directly photographed\"\n        },\n        CustomRendered : {\n            0 : \"Normal process\",\n            1 : \"Custom process\"\n        },\n        WhiteBalance : {\n            0 : \"Auto white balance\",\n            1 : \"Manual white balance\"\n        },\n        GainControl : {\n            0 : \"None\",\n            1 : \"Low gain up\",\n            2 : \"High gain up\",\n            3 : \"Low gain down\",\n            4 : \"High gain down\"\n        },\n        Contrast : {\n            0 : \"Normal\",\n            1 : \"Soft\",\n            2 : \"Hard\"\n        },\n        Saturation : {\n            0 : \"Normal\",\n            1 : \"Low saturation\",\n            2 : \"High saturation\"\n        },\n        Sharpness : {\n            0 : \"Normal\",\n            1 : \"Soft\",\n            2 : \"Hard\"\n        },\n        SubjectDistanceRange : {\n            0 : \"Unknown\",\n            1 : \"Macro\",\n            2 : \"Close view\",\n            3 : \"Distant view\"\n        },\n        FileSource : {\n            3 : \"DSC\"\n        },\n\n        Components : {\n            0 : \"\",\n            1 : \"Y\",\n            2 : \"Cb\",\n            3 : \"Cr\",\n            4 : \"R\",\n            5 : \"G\",\n            6 : \"B\"\n        }\n    };\n\n    function addEvent(element, event, handler) {\n        if (element.addEventListener) {\n            element.addEventListener(event, handler, false);\n        } else if (element.attachEvent) {\n            element.attachEvent(\"on\" + event, handler);\n        }\n    }\n\n    function imageHasData(img) {\n        return !!(img.exifdata);\n    }\n\n\n    function base64ToArrayBuffer(base64, contentType) {\n        contentType = contentType || base64.match(/^data\\:([^\\;]+)\\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'\n        base64 = base64.replace(/^data\\:([^\\;]+)\\;base64,/gmi, '');\n        var binary = atob(base64);\n        var len = binary.length;\n        var buffer = new ArrayBuffer(len);\n        var view = new Uint8Array(buffer);\n        for (var i = 0; i < len; i++) {\n            view[i] = binary.charCodeAt(i);\n        }\n        return buffer;\n    }\n\n    function objectURLToBlob(url, callback) {\n        var http = new XMLHttpRequest();\n        http.open(\"GET\", url, true);\n        http.responseType = \"blob\";\n        http.onload = function(e) {\n            if (this.status == 200 || this.status === 0) {\n                callback(this.response);\n            }\n        };\n        http.send();\n    }\n\n    function getImageData(img, callback) {\n        function handleBinaryFile(binFile) {\n            var data = findEXIFinJPEG(binFile);\n            var iptcdata = findIPTCinJPEG(binFile);\n            var xmpdata= findXMPinJPEG(binFile);\n            img.exifdata = data || {};\n            img.iptcdata = iptcdata || {};\n            img.xmpdata = xmpdata || {};\n            if (callback) {\n                callback.call(img);\n            }\n        }\n\n        if (img.src) {\n            if (/^data\\:/i.test(img.src)) { // Data URI\n                var arrayBuffer = base64ToArrayBuffer(img.src);\n                handleBinaryFile(arrayBuffer);\n\n            } else if (/^blob\\:/i.test(img.src)) { // Object URL\n                var fileReader = new FileReader();\n                fileReader.onload = function(e) {\n                    handleBinaryFile(e.target.result);\n                };\n                objectURLToBlob(img.src, function (blob) {\n                    fileReader.readAsArrayBuffer(blob);\n                });\n            } else {\n                var http = new XMLHttpRequest();\n                http.onload = function() {\n                    if (this.status == 200 || this.status === 0) {\n                        handleBinaryFile(http.response);\n                    } else {\n                        throw \"Could not load image\";\n                    }\n                    http = null;\n                };\n                http.open(\"GET\", img.src, true);\n                http.responseType = \"arraybuffer\";\n                http.send(null);\n            }\n        } else if (self.FileReader && (img instanceof self.Blob || img instanceof self.File)) {\n            var fileReader = new FileReader();\n            fileReader.onload = function(e) {\n                if (debug) console.log(\"Got file of length \" + e.target.result.byteLength);\n                handleBinaryFile(e.target.result);\n            };\n\n            fileReader.readAsArrayBuffer(img);\n        }\n    }\n\n    function findEXIFinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength,\n            marker;\n\n        while (offset < length) {\n            if (dataView.getUint8(offset) != 0xFF) {\n                if (debug) console.log(\"Not a valid marker at offset \" + offset + \", found: \" + dataView.getUint8(offset));\n                return false; // not a valid marker, something is wrong\n            }\n\n            marker = dataView.getUint8(offset + 1);\n            if (debug) console.log(marker);\n\n            // we could implement handling for other markers here,\n            // but we're only looking for 0xFFE1 for EXIF data\n\n            if (marker == 225) {\n                if (debug) console.log(\"Found 0xFFE1 marker\");\n\n                return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);\n\n                // offset += 2 + file.getShortAt(offset+2, true);\n\n            } else {\n                offset += 2 + dataView.getUint16(offset+2);\n            }\n\n        }\n\n    }\n\n    function findIPTCinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength;\n\n\n        var isFieldSegmentStart = function(dataView, offset){\n            return (\n                dataView.getUint8(offset) === 0x38 &&\n                dataView.getUint8(offset+1) === 0x42 &&\n                dataView.getUint8(offset+2) === 0x49 &&\n                dataView.getUint8(offset+3) === 0x4D &&\n                dataView.getUint8(offset+4) === 0x04 &&\n                dataView.getUint8(offset+5) === 0x04\n            );\n        };\n\n        while (offset < length) {\n\n            if ( isFieldSegmentStart(dataView, offset )){\n\n                // Get the length of the name header (which is padded to an even number of bytes)\n                var nameHeaderLength = dataView.getUint8(offset+7);\n                if(nameHeaderLength % 2 !== 0) nameHeaderLength += 1;\n                // Check for pre photoshop 6 format\n                if(nameHeaderLength === 0) {\n                    // Always 4\n                    nameHeaderLength = 4;\n                }\n\n                var startOffset = offset + 8 + nameHeaderLength;\n                var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);\n\n                return readIPTCData(file, startOffset, sectionLength);\n\n                break;\n\n            }\n\n\n            // Not the marker, continue searching\n            offset++;\n\n        }\n\n    }\n    var IptcFieldMap = {\n        0x78 : 'caption',\n        0x6E : 'credit',\n        0x19 : 'keywords',\n        0x37 : 'dateCreated',\n        0x50 : 'byline',\n        0x55 : 'bylineTitle',\n        0x7A : 'captionWriter',\n        0x69 : 'headline',\n        0x74 : 'copyright',\n        0x0F : 'category'\n    };\n    function readIPTCData(file, startOffset, sectionLength){\n        var dataView = new DataView(file);\n        var data = {};\n        var fieldValue, fieldName, dataSize, segmentType, segmentSize;\n        var segmentStartPos = startOffset;\n        while(segmentStartPos < startOffset+sectionLength) {\n            if(dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos+1) === 0x02){\n                segmentType = dataView.getUint8(segmentStartPos+2);\n                if(segmentType in IptcFieldMap) {\n                    dataSize = dataView.getInt16(segmentStartPos+3);\n                    segmentSize = dataSize + 5;\n                    fieldName = IptcFieldMap[segmentType];\n                    fieldValue = getStringFromDB(dataView, segmentStartPos+5, dataSize);\n                    // Check if we already stored a value with this name\n                    if(data.hasOwnProperty(fieldName)) {\n                        // Value already stored with this name, create multivalue field\n                        if(data[fieldName] instanceof Array) {\n                            data[fieldName].push(fieldValue);\n                        }\n                        else {\n                            data[fieldName] = [data[fieldName], fieldValue];\n                        }\n                    }\n                    else {\n                        data[fieldName] = fieldValue;\n                    }\n                }\n\n            }\n            segmentStartPos++;\n        }\n        return data;\n    }\n\n\n\n    function readTags(file, tiffStart, dirStart, strings, bigEnd) {\n        var entries = file.getUint16(dirStart, !bigEnd),\n            tags = {},\n            entryOffset, tag,\n            i;\n\n        for (i=0;i<entries;i++) {\n            entryOffset = dirStart + i*12 + 2;\n            tag = strings[file.getUint16(entryOffset, !bigEnd)];\n            if (!tag && debug) console.log(\"Unknown tag: \" + file.getUint16(entryOffset, !bigEnd));\n            tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);\n        }\n        return tags;\n    }\n\n\n    function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {\n        var type = file.getUint16(entryOffset+2, !bigEnd),\n            numValues = file.getUint32(entryOffset+4, !bigEnd),\n            valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,\n            offset,\n            vals, val, n,\n            numerator, denominator;\n\n        switch (type) {\n            case 1: // byte, 8-bit unsigned int\n            case 7: // undefined, 8-bit byte, value depending on field\n                if (numValues == 1) {\n                    return file.getUint8(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 4 ? valueOffset : (entryOffset + 8);\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint8(offset + n);\n                    }\n                    return vals;\n                }\n\n            case 2: // ascii, 8-bit byte\n                offset = numValues > 4 ? valueOffset : (entryOffset + 8);\n                return getStringFromDB(file, offset, numValues-1);\n\n            case 3: // short, 16 bit int\n                if (numValues == 1) {\n                    return file.getUint16(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 2 ? valueOffset : (entryOffset + 8);\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint16(offset + 2*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 4: // long, 32 bit int\n                if (numValues == 1) {\n                    return file.getUint32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 5:    // rational = two long values, first is numerator, second is denominator\n                if (numValues == 1) {\n                    numerator = file.getUint32(valueOffset, !bigEnd);\n                    denominator = file.getUint32(valueOffset+4, !bigEnd);\n                    val = new Number(numerator / denominator);\n                    val.numerator = numerator;\n                    val.denominator = denominator;\n                    return val;\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        numerator = file.getUint32(valueOffset + 8*n, !bigEnd);\n                        denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);\n                        vals[n] = new Number(numerator / denominator);\n                        vals[n].numerator = numerator;\n                        vals[n].denominator = denominator;\n                    }\n                    return vals;\n                }\n\n            case 9: // slong, 32 bit signed int\n                if (numValues == 1) {\n                    return file.getInt32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 10: // signed rational, two slongs, first is numerator, second is denominator\n                if (numValues == 1) {\n                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);\n                    }\n                    return vals;\n                }\n        }\n    }\n\n    /**\n    * Given an IFD (Image File Directory) start offset\n    * returns an offset to next IFD or 0 if it's the last IFD.\n    */\n    function getNextIFDOffset(dataView, dirStart, bigEnd){\n        //the first 2bytes means the number of directory entries contains in this IFD\n        var entries = dataView.getUint16(dirStart, !bigEnd);\n\n        // After last directory entry, there is a 4bytes of data,\n        // it means an offset to next IFD.\n        // If its value is '0x00000000', it means this is the last IFD and there is no linked IFD.\n\n        return dataView.getUint32(dirStart + 2 + entries * 12, !bigEnd); // each entry is 12 bytes long\n    }\n\n    function readThumbnailImage(dataView, tiffStart, firstIFDOffset, bigEnd){\n        // get the IFD1 offset\n        var IFD1OffsetPointer = getNextIFDOffset(dataView, tiffStart+firstIFDOffset, bigEnd);\n\n        if (!IFD1OffsetPointer) {\n            // console.log('******** IFD1Offset is empty, image thumb not found ********');\n            return {};\n        }\n        else if (IFD1OffsetPointer > dataView.byteLength) { // this should not happen\n            // console.log('******** IFD1Offset is outside the bounds of the DataView ********');\n            return {};\n        }\n        // console.log('*******  thumbnail IFD offset (IFD1) is: %s', IFD1OffsetPointer);\n\n        var thumbTags = readTags(dataView, tiffStart, tiffStart + IFD1OffsetPointer, IFD1Tags, bigEnd)\n\n        // EXIF 2.3 specification for JPEG format thumbnail\n\n        // If the value of Compression(0x0103) Tag in IFD1 is '6', thumbnail image format is JPEG.\n        // Most of Exif image uses JPEG format for thumbnail. In that case, you can get offset of thumbnail\n        // by JpegIFOffset(0x0201) Tag in IFD1, size of thumbnail by JpegIFByteCount(0x0202) Tag.\n        // Data format is ordinary JPEG format, starts from 0xFFD8 and ends by 0xFFD9. It seems that\n        // JPEG format and 160x120pixels of size are recommended thumbnail format for Exif2.1 or later.\n\n        if (thumbTags['Compression']) {\n            // console.log('Thumbnail image found!');\n\n            switch (thumbTags['Compression']) {\n                case 6:\n                    // console.log('Thumbnail image format is JPEG');\n                    if (thumbTags.JpegIFOffset && thumbTags.JpegIFByteCount) {\n                    // extract the thumbnail\n                        var tOffset = tiffStart + thumbTags.JpegIFOffset;\n                        var tLength = thumbTags.JpegIFByteCount;\n                        thumbTags['blob'] = new Blob([new Uint8Array(dataView.buffer, tOffset, tLength)], {\n                            type: 'image/jpeg'\n                        });\n                    }\n                break;\n\n            case 1:\n                console.log(\"Thumbnail image format is TIFF, which is not implemented.\");\n                break;\n            default:\n                console.log(\"Unknown thumbnail image format '%s'\", thumbTags['Compression']);\n            }\n        }\n        else if (thumbTags['PhotometricInterpretation'] == 2) {\n            console.log(\"Thumbnail image format is RGB, which is not implemented.\");\n        }\n        return thumbTags;\n    }\n\n    function getStringFromDB(buffer, start, length) {\n        var outstr = \"\";\n        for (n = start; n < start+length; n++) {\n            outstr += String.fromCharCode(buffer.getUint8(n));\n        }\n        return outstr;\n    }\n\n    function readEXIFData(file, start) {\n        if (getStringFromDB(file, start, 4) != \"Exif\") {\n            if (debug) console.log(\"Not valid EXIF data! \" + getStringFromDB(file, start, 4));\n            return false;\n        }\n\n        var bigEnd,\n            tags, tag,\n            exifData, gpsData,\n            tiffOffset = start + 6;\n\n        // test for TIFF validity and endianness\n        if (file.getUint16(tiffOffset) == 0x4949) {\n            bigEnd = false;\n        } else if (file.getUint16(tiffOffset) == 0x4D4D) {\n            bigEnd = true;\n        } else {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x4949 or 0x4D4D)\");\n            return false;\n        }\n\n        if (file.getUint16(tiffOffset+2, !bigEnd) != 0x002A) {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x002A)\");\n            return false;\n        }\n\n        var firstIFDOffset = file.getUint32(tiffOffset+4, !bigEnd);\n\n        if (firstIFDOffset < 0x00000008) {\n            if (debug) console.log(\"Not valid TIFF data! (First offset less than 8)\", file.getUint32(tiffOffset+4, !bigEnd));\n            return false;\n        }\n\n        tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);\n\n        if (tags.ExifIFDPointer) {\n            exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);\n            for (tag in exifData) {\n                switch (tag) {\n                    case \"LightSource\" :\n                    case \"Flash\" :\n                    case \"MeteringMode\" :\n                    case \"ExposureProgram\" :\n                    case \"SensingMethod\" :\n                    case \"SceneCaptureType\" :\n                    case \"SceneType\" :\n                    case \"CustomRendered\" :\n                    case \"WhiteBalance\" :\n                    case \"GainControl\" :\n                    case \"Contrast\" :\n                    case \"Saturation\" :\n                    case \"Sharpness\" :\n                    case \"SubjectDistanceRange\" :\n                    case \"FileSource\" :\n                        exifData[tag] = StringValues[tag][exifData[tag]];\n                        break;\n\n                    case \"ExifVersion\" :\n                    case \"FlashpixVersion\" :\n                        exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);\n                        break;\n\n                    case \"ComponentsConfiguration\" :\n                        exifData[tag] =\n                            StringValues.Components[exifData[tag][0]] +\n                            StringValues.Components[exifData[tag][1]] +\n                            StringValues.Components[exifData[tag][2]] +\n                            StringValues.Components[exifData[tag][3]];\n                        break;\n                }\n                tags[tag] = exifData[tag];\n            }\n        }\n\n        if (tags.GPSInfoIFDPointer) {\n            gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);\n            for (tag in gpsData) {\n                switch (tag) {\n                    case \"GPSVersionID\" :\n                        gpsData[tag] = gpsData[tag][0] +\n                            \".\" + gpsData[tag][1] +\n                            \".\" + gpsData[tag][2] +\n                            \".\" + gpsData[tag][3];\n                        break;\n                }\n                tags[tag] = gpsData[tag];\n            }\n        }\n\n        // extract thumbnail\n        tags['thumbnail'] = readThumbnailImage(file, tiffOffset, firstIFDOffset, bigEnd);\n\n        return tags;\n    }\n\n   function findXMPinJPEG(file) {\n\n        if (!('DOMParser' in self)) {\n            // console.warn('XML parsing not supported without DOMParser');\n            return;\n        }\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n           if (debug) console.log(\"Not a valid JPEG\");\n           return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength,\n            dom = new DOMParser();\n\n        while (offset < (length-4)) {\n            if (getStringFromDB(dataView, offset, 4) == \"http\") {\n                var startOffset = offset - 1;\n                var sectionLength = dataView.getUint16(offset - 2) - 1;\n                var xmpString = getStringFromDB(dataView, startOffset, sectionLength)\n                var xmpEndIndex = xmpString.indexOf('xmpmeta>') + 8;\n                xmpString = xmpString.substring( xmpString.indexOf( '<x:xmpmeta' ), xmpEndIndex );\n\n                var indexOfXmp = xmpString.indexOf('x:xmpmeta') + 10\n                //Many custom written programs embed xmp/xml without any namespace. Following are some of them.\n                //Without these namespaces, XML is thought to be invalid by parsers\n                xmpString = xmpString.slice(0, indexOfXmp)\n                            + 'xmlns:Iptc4xmpCore=\"http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/\" '\n                            + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n                            + 'xmlns:tiff=\"http://ns.adobe.com/tiff/1.0/\" '\n                            + 'xmlns:plus=\"http://schemas.android.com/apk/lib/com.google.android.gms.plus\" '\n                            + 'xmlns:ext=\"http://www.gettyimages.com/xsltExtension/1.0\" '\n                            + 'xmlns:exif=\"http://ns.adobe.com/exif/1.0/\" '\n                            + 'xmlns:stEvt=\"http://ns.adobe.com/xap/1.0/sType/ResourceEvent#\" '\n                            + 'xmlns:stRef=\"http://ns.adobe.com/xap/1.0/sType/ResourceRef#\" '\n                            + 'xmlns:crs=\"http://ns.adobe.com/camera-raw-settings/1.0/\" '\n                            + 'xmlns:xapGImg=\"http://ns.adobe.com/xap/1.0/g/img/\" '\n                            + 'xmlns:Iptc4xmpExt=\"http://iptc.org/std/Iptc4xmpExt/2008-02-29/\" '\n                            + xmpString.slice(indexOfXmp)\n\n                var domDocument = dom.parseFromString( xmpString, 'text/xml' );\n                return xml2Object(domDocument);\n            } else{\n             offset++;\n            }\n        }\n    }\n\n    function xml2Object(xml) {\n        try {\n            var obj = {};\n            if (xml.children.length > 0) {\n              for (var i = 0; i < xml.children.length; i++) {\n                var item = xml.children.item(i);\n                var attributes = item.attributes;\n                for(var idx in attributes) {\n                    var itemAtt = attributes[idx];\n                    var dataKey = itemAtt.nodeName;\n                    var dataValue = itemAtt.nodeValue;\n\n                    if(dataKey !== undefined) {\n                        obj[dataKey] = dataValue;\n                    }\n                }\n                var nodeName = item.nodeName;\n\n                if (typeof (obj[nodeName]) == \"undefined\") {\n                  obj[nodeName] = xml2json(item);\n                } else {\n                  if (typeof (obj[nodeName].push) == \"undefined\") {\n                    var old = obj[nodeName];\n\n                    obj[nodeName] = [];\n                    obj[nodeName].push(old);\n                  }\n                  obj[nodeName].push(xml2json(item));\n                }\n              }\n            } else {\n              obj = xml.textContent;\n            }\n            return obj;\n          } catch (e) {\n              console.log(e.message);\n          }\n    }\n\n    EXIF.getData = function(img, callback) {\n        if ((self.Image && img instanceof self.Image)\n            || (self.HTMLImageElement && img instanceof self.HTMLImageElement)\n            && !img.complete)\n            return false;\n\n        if (!imageHasData(img)) {\n            getImageData(img, callback);\n        } else {\n            if (callback) {\n                callback.call(img);\n            }\n        }\n        return true;\n    }\n\n    EXIF.getTag = function(img, tag) {\n        if (!imageHasData(img)) return;\n        return img.exifdata[tag];\n    }\n    \n    EXIF.getIptcTag = function(img, tag) {\n        if (!imageHasData(img)) return;\n        return img.iptcdata[tag];\n    }\n\n    EXIF.getAllTags = function(img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.exifdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    }\n    \n    EXIF.getAllIptcTags = function(img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.iptcdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    }\n\n    EXIF.pretty = function(img) {\n        if (!imageHasData(img)) return \"\";\n        var a,\n            data = img.exifdata,\n            strPretty = \"\";\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                if (typeof data[a] == \"object\") {\n                    if (data[a] instanceof Number) {\n                        strPretty += a + \" : \" + data[a] + \" [\" + data[a].numerator + \"/\" + data[a].denominator + \"]\\r\\n\";\n                    } else {\n                        strPretty += a + \" : [\" + data[a].length + \" values]\\r\\n\";\n                    }\n                } else {\n                    strPretty += a + \" : \" + data[a] + \"\\r\\n\";\n                }\n            }\n        }\n        return strPretty;\n    }\n\n    EXIF.readFromBinaryFile = function(file) {\n        return findEXIFinJPEG(file);\n    }\n\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n            return EXIF;\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n}.call(this));\n\n\n\n/***/ }),\n\n/***/ 353:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_exif_js__ = __webpack_require__(268);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_exif_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_exif_js__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      headerImage: '', picValue: ''\n    };\n  },\n  mounted: function mounted() {},\n\n  methods: {\n    upload: function upload(e) {\n      var files = e.target.files || e.dataTransfer.files;\n      if (!files.length) return;\n      this.picValue = files[0];\n      this.imgPreview(this.picValue);\n    },\n    imgPreview: function imgPreview(file) {\n      var self = this;\n      var Orientation = void 0;\n      //去获取拍照时的信息，解决拍出来的照片旋转问题  \n      __WEBPACK_IMPORTED_MODULE_0_exif_js___default.a.getData(file, function () {\n        Orientation = __WEBPACK_IMPORTED_MODULE_0_exif_js___default.a.getTag(this, 'Orientation');\n      });\n      // 看支持不支持FileReader  \n      if (!file || !window.FileReader) return;\n\n      if (/^image/.test(file.type)) {\n        // 创建一个reader  \n        var reader = new FileReader();\n        // 将图片2将转成 base64 格式  \n        reader.readAsDataURL(file);\n        // 读取成功后的回调  \n        reader.onloadend = function () {\n          var result = this.result;\n          var img = new Image();\n          img.src = result;\n          //判断图片是否大于100K,是就直接上传，反之压缩图片  \n          if (this.result.length <= 100 * 1024) {\n            self.headerImage = this.result;\n            self.postImg();\n          } else {\n            img.onload = function () {\n              var data = self.compress(img, Orientation);\n              self.headerImage = data;\n              self.postImg();\n            };\n          }\n        };\n      }\n    },\n    postImg: function postImg() {\n      //这里写接口  \n    },\n    rotateImg: function rotateImg(img, direction, canvas) {\n      //最小与最大旋转方向，图片旋转4次后回到原方向      \n      var min_step = 0;\n      var max_step = 3;\n      if (img == null) return;\n      //img的高度和宽度不能在img元素隐藏后获取，否则会出错      \n      var height = img.height;\n      var width = img.width;\n      var step = 2;\n      if (step == null) {\n        step = min_step;\n      }\n      if (direction == 'right') {\n        step++;\n        //旋转到原位置，即超过最大值      \n        step > max_step && (step = min_step);\n      } else {\n        step--;\n        step < min_step && (step = max_step);\n      }\n      //旋转角度以弧度值为参数      \n      var degree = step * 90 * Math.PI / 180;\n      var ctx = canvas.getContext('2d');\n      switch (step) {\n        case 0:\n          canvas.width = width;\n          canvas.height = height;\n          ctx.drawImage(img, 0, 0);\n          break;\n        case 1:\n          canvas.width = height;\n          canvas.height = width;\n          ctx.rotate(degree);\n          ctx.drawImage(img, 0, -height);\n          break;\n        case 2:\n          canvas.width = width;\n          canvas.height = height;\n          ctx.rotate(degree);\n          ctx.drawImage(img, -width, -height);\n          break;\n        case 3:\n          canvas.width = height;\n          canvas.height = width;\n          ctx.rotate(degree);\n          ctx.drawImage(img, -width, 0);\n          break;\n      }\n    },\n    compress: function compress(img, Orientation) {\n      var canvas = document.createElement(\"canvas\");\n      var ctx = canvas.getContext('2d');\n      //瓦片canvas  \n      var tCanvas = document.createElement(\"canvas\");\n      var tctx = tCanvas.getContext(\"2d\");\n      var initSize = img.src.length;\n      var width = img.width;\n      var height = img.height;\n      //如果图片大于四百万像素，计算压缩比并将大小压至400万以下  \n      var ratio = void 0;\n      if ((ratio = width * height / 4000000) > 1) {\n        console.log(\"大于400万像素\");\n        ratio = Math.sqrt(ratio);\n        width /= ratio;\n        height /= ratio;\n      } else {\n        ratio = 1;\n      }\n      canvas.width = width;\n      canvas.height = height;\n      //        铺底色  \n      ctx.fillStyle = \"#fff\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      //如果图片像素大于100万则使用瓦片绘制  \n      var count = void 0;\n      if ((count = width * height / 1000000) > 1) {\n        console.log(\"超过100W像素\");\n        count = ~~(Math.sqrt(count) + 1); //计算要分成多少块瓦片  \n        //            计算每块瓦片的宽和高  \n        var nw = ~~(width / count);\n        var nh = ~~(height / count);\n        tCanvas.width = nw;\n        tCanvas.height = nh;\n        for (var i = 0; i < count; i++) {\n          for (var j = 0; j < count; j++) {\n            tctx.drawImage(img, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, 0, 0, nw, nh);\n            ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);\n          }\n        }\n      } else {\n        ctx.drawImage(img, 0, 0, width, height);\n      }\n      //修复ios上传图片的时候 被旋转的问题  \n      if (Orientation != \"\" && Orientation != 1) {\n        switch (Orientation) {\n          case 6:\n            //需要顺时针（向左）90度旋转  \n            this.rotateImg(img, 'left', canvas);\n            break;\n          case 8:\n            //需要逆时针（向右）90度旋转  \n            this.rotateImg(img, 'right', canvas);\n            break;\n          case 3:\n            //需要180度旋转  \n            this.rotateImg(img, 'right', canvas); //转两次  \n            this.rotateImg(img, 'right', canvas);\n            break;\n        }\n      }\n      //进行最小压缩  \n      var ndata = canvas.toDataURL('image/jpeg', 0.1);\n      console.log('压缩前：' + initSize);\n      console.log('压缩后：' + ndata.length);\n      console.log('压缩率：' + ~~(100 * (initSize - ndata.length) / initSize) + \"%\");\n      console.log(this.headerImage);\n      console.log(this.picValue);\n      tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0;\n      return ndata;\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 376:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(165)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"*{margin:0;padding:0}.show{width:100px;height:100px;position:relative;border-radius:50%;border:1px solid #d5d5d5}.picture,.show{overflow:hidden}.picture{width:100%;height:100%;background-position:50%;background-repeat:no-repeat;background-size:cover}\", \"\", {\"version\":3,\"sources\":[\"C:/wamp/www/jun/weixin/my-wx/src/components/imgTest.vue\"],\"names\":[],\"mappings\":\"AACA,EACE,SAAU,AACV,SAAW,CACZ,AACD,MACE,YAAa,AACb,aAAc,AAEd,kBAAmB,AACnB,kBAAmB,AACnB,wBAA0B,CAC3B,AACD,eALE,eAAiB,CAYlB,AAPD,SACE,WAAY,AACZ,YAAa,AAEb,wBAAmC,AACnC,4BAA6B,AAC7B,qBAAuB,CACxB\",\"file\":\"imgTest.vue\",\"sourcesContent\":[\"\\n* {\\n  margin: 0;\\n  padding: 0;\\n}\\n.show {\\n  width: 100px;\\n  height: 100px;\\n  overflow: hidden;\\n  position: relative;\\n  border-radius: 50%;\\n  border: 1px solid #d5d5d5;\\n}\\n.picture {\\n  width: 100%;\\n  height: 100%;\\n  overflow: hidden;\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  background-size: cover;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 405:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(376);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(166)(\"50203d40\", content, true);\n\n/***/ }),\n\n/***/ 434:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('div', {\n    staticStyle: {\n      \"padding\": \"20px\"\n    }\n  }, [_c('div', {\n    staticClass: \"show\"\n  }, [_c('div', {\n    staticClass: \"picture\",\n    style: ('backgroundImage:url(' + _vm.headerImage + ')')\n  })]), _vm._v(\" \"), _c('div', {\n    staticStyle: {\n      \"margin-top\": \"20px\"\n    }\n  }, [_c('input', {\n    attrs: {\n      \"type\": \"file\",\n      \"id\": \"upload\",\n      \"multiple\": \"\",\n      \"accept\": \"image\"\n    },\n    on: {\n      \"change\": _vm.upload\n    }\n  }), _vm._v(\" \"), _c('label', {\n    attrs: {\n      \"for\": \"upload\"\n    }\n  })])])])\n},staticRenderFns: []}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/21.9664f7bba9f82eb830f0.js","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/_extract-text-webpack-plugin@2.1.2@extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../node_modules/_vue-loader@12.2.2@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-0b5fd1a2\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/_vux-loader@1.1.2@vux-loader/src/style-loader.js!../../node_modules/_vue-loader@12.2.2@vue-loader/lib/selector?type=styles&index=0!./imgTest.vue\")\n}\nvar Component = require(\"!../../node_modules/_vue-loader@12.2.2@vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/_vux-loader@1.1.2@vux-loader/src/script-loader.js!../../node_modules/_vue-loader@12.2.2@vue-loader/lib/selector?type=script&index=0!./imgTest.vue\"),\n  /* template */\n  require(\"!!../../node_modules/_vue-loader@12.2.2@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0b5fd1a2\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../node_modules/_vux-loader@1.1.2@vux-loader/src/before-template-compiler-loader.js!../../node_modules/_vux-loader@1.1.2@vux-loader/src/template-loader.js!../../node_modules/_vue-loader@12.2.2@vue-loader/lib/selector?type=template&index=0!./imgTest.vue\"),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/imgTest.vue\n// module id = 167\n// module chunks = 21","(function() {\n\n    var debug = false;\n\n    var root = this;\n\n    var EXIF = function(obj) {\n        if (obj instanceof EXIF) return obj;\n        if (!(this instanceof EXIF)) return new EXIF(obj);\n        this.EXIFwrapped = obj;\n    };\n\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = EXIF;\n        }\n        exports.EXIF = EXIF;\n    } else {\n        root.EXIF = EXIF;\n    }\n\n    var ExifTags = EXIF.Tags = {\n\n        // version tags\n        0x9000 : \"ExifVersion\",             // EXIF version\n        0xA000 : \"FlashpixVersion\",         // Flashpix format version\n\n        // colorspace tags\n        0xA001 : \"ColorSpace\",              // Color space information tag\n\n        // image configuration\n        0xA002 : \"PixelXDimension\",         // Valid width of meaningful image\n        0xA003 : \"PixelYDimension\",         // Valid height of meaningful image\n        0x9101 : \"ComponentsConfiguration\", // Information about channels\n        0x9102 : \"CompressedBitsPerPixel\",  // Compressed bits per pixel\n\n        // user information\n        0x927C : \"MakerNote\",               // Any desired information written by the manufacturer\n        0x9286 : \"UserComment\",             // Comments by user\n\n        // related file\n        0xA004 : \"RelatedSoundFile\",        // Name of related sound file\n\n        // date and time\n        0x9003 : \"DateTimeOriginal\",        // Date and time when the original image was generated\n        0x9004 : \"DateTimeDigitized\",       // Date and time when the image was stored digitally\n        0x9290 : \"SubsecTime\",              // Fractions of seconds for DateTime\n        0x9291 : \"SubsecTimeOriginal\",      // Fractions of seconds for DateTimeOriginal\n        0x9292 : \"SubsecTimeDigitized\",     // Fractions of seconds for DateTimeDigitized\n\n        // picture-taking conditions\n        0x829A : \"ExposureTime\",            // Exposure time (in seconds)\n        0x829D : \"FNumber\",                 // F number\n        0x8822 : \"ExposureProgram\",         // Exposure program\n        0x8824 : \"SpectralSensitivity\",     // Spectral sensitivity\n        0x8827 : \"ISOSpeedRatings\",         // ISO speed rating\n        0x8828 : \"OECF\",                    // Optoelectric conversion factor\n        0x9201 : \"ShutterSpeedValue\",       // Shutter speed\n        0x9202 : \"ApertureValue\",           // Lens aperture\n        0x9203 : \"BrightnessValue\",         // Value of brightness\n        0x9204 : \"ExposureBias\",            // Exposure bias\n        0x9205 : \"MaxApertureValue\",        // Smallest F number of lens\n        0x9206 : \"SubjectDistance\",         // Distance to subject in meters\n        0x9207 : \"MeteringMode\",            // Metering mode\n        0x9208 : \"LightSource\",             // Kind of light source\n        0x9209 : \"Flash\",                   // Flash status\n        0x9214 : \"SubjectArea\",             // Location and area of main subject\n        0x920A : \"FocalLength\",             // Focal length of the lens in mm\n        0xA20B : \"FlashEnergy\",             // Strobe energy in BCPS\n        0xA20C : \"SpatialFrequencyResponse\",    //\n        0xA20E : \"FocalPlaneXResolution\",   // Number of pixels in width direction per FocalPlaneResolutionUnit\n        0xA20F : \"FocalPlaneYResolution\",   // Number of pixels in height direction per FocalPlaneResolutionUnit\n        0xA210 : \"FocalPlaneResolutionUnit\",    // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution\n        0xA214 : \"SubjectLocation\",         // Location of subject in image\n        0xA215 : \"ExposureIndex\",           // Exposure index selected on camera\n        0xA217 : \"SensingMethod\",           // Image sensor type\n        0xA300 : \"FileSource\",              // Image source (3 == DSC)\n        0xA301 : \"SceneType\",               // Scene type (1 == directly photographed)\n        0xA302 : \"CFAPattern\",              // Color filter array geometric pattern\n        0xA401 : \"CustomRendered\",          // Special processing\n        0xA402 : \"ExposureMode\",            // Exposure mode\n        0xA403 : \"WhiteBalance\",            // 1 = auto white balance, 2 = manual\n        0xA404 : \"DigitalZoomRation\",       // Digital zoom ratio\n        0xA405 : \"FocalLengthIn35mmFilm\",   // Equivalent foacl length assuming 35mm film camera (in mm)\n        0xA406 : \"SceneCaptureType\",        // Type of scene\n        0xA407 : \"GainControl\",             // Degree of overall image gain adjustment\n        0xA408 : \"Contrast\",                // Direction of contrast processing applied by camera\n        0xA409 : \"Saturation\",              // Direction of saturation processing applied by camera\n        0xA40A : \"Sharpness\",               // Direction of sharpness processing applied by camera\n        0xA40B : \"DeviceSettingDescription\",    //\n        0xA40C : \"SubjectDistanceRange\",    // Distance to subject\n\n        // other tags\n        0xA005 : \"InteroperabilityIFDPointer\",\n        0xA420 : \"ImageUniqueID\"            // Identifier assigned uniquely to each image\n    };\n\n    var TiffTags = EXIF.TiffTags = {\n        0x0100 : \"ImageWidth\",\n        0x0101 : \"ImageHeight\",\n        0x8769 : \"ExifIFDPointer\",\n        0x8825 : \"GPSInfoIFDPointer\",\n        0xA005 : \"InteroperabilityIFDPointer\",\n        0x0102 : \"BitsPerSample\",\n        0x0103 : \"Compression\",\n        0x0106 : \"PhotometricInterpretation\",\n        0x0112 : \"Orientation\",\n        0x0115 : \"SamplesPerPixel\",\n        0x011C : \"PlanarConfiguration\",\n        0x0212 : \"YCbCrSubSampling\",\n        0x0213 : \"YCbCrPositioning\",\n        0x011A : \"XResolution\",\n        0x011B : \"YResolution\",\n        0x0128 : \"ResolutionUnit\",\n        0x0111 : \"StripOffsets\",\n        0x0116 : \"RowsPerStrip\",\n        0x0117 : \"StripByteCounts\",\n        0x0201 : \"JPEGInterchangeFormat\",\n        0x0202 : \"JPEGInterchangeFormatLength\",\n        0x012D : \"TransferFunction\",\n        0x013E : \"WhitePoint\",\n        0x013F : \"PrimaryChromaticities\",\n        0x0211 : \"YCbCrCoefficients\",\n        0x0214 : \"ReferenceBlackWhite\",\n        0x0132 : \"DateTime\",\n        0x010E : \"ImageDescription\",\n        0x010F : \"Make\",\n        0x0110 : \"Model\",\n        0x0131 : \"Software\",\n        0x013B : \"Artist\",\n        0x8298 : \"Copyright\"\n    };\n\n    var GPSTags = EXIF.GPSTags = {\n        0x0000 : \"GPSVersionID\",\n        0x0001 : \"GPSLatitudeRef\",\n        0x0002 : \"GPSLatitude\",\n        0x0003 : \"GPSLongitudeRef\",\n        0x0004 : \"GPSLongitude\",\n        0x0005 : \"GPSAltitudeRef\",\n        0x0006 : \"GPSAltitude\",\n        0x0007 : \"GPSTimeStamp\",\n        0x0008 : \"GPSSatellites\",\n        0x0009 : \"GPSStatus\",\n        0x000A : \"GPSMeasureMode\",\n        0x000B : \"GPSDOP\",\n        0x000C : \"GPSSpeedRef\",\n        0x000D : \"GPSSpeed\",\n        0x000E : \"GPSTrackRef\",\n        0x000F : \"GPSTrack\",\n        0x0010 : \"GPSImgDirectionRef\",\n        0x0011 : \"GPSImgDirection\",\n        0x0012 : \"GPSMapDatum\",\n        0x0013 : \"GPSDestLatitudeRef\",\n        0x0014 : \"GPSDestLatitude\",\n        0x0015 : \"GPSDestLongitudeRef\",\n        0x0016 : \"GPSDestLongitude\",\n        0x0017 : \"GPSDestBearingRef\",\n        0x0018 : \"GPSDestBearing\",\n        0x0019 : \"GPSDestDistanceRef\",\n        0x001A : \"GPSDestDistance\",\n        0x001B : \"GPSProcessingMethod\",\n        0x001C : \"GPSAreaInformation\",\n        0x001D : \"GPSDateStamp\",\n        0x001E : \"GPSDifferential\"\n    };\n\n     // EXIF 2.3 Spec\n    var IFD1Tags = EXIF.IFD1Tags = {\n        0x0100: \"ImageWidth\",\n        0x0101: \"ImageHeight\",\n        0x0102: \"BitsPerSample\",\n        0x0103: \"Compression\",\n        0x0106: \"PhotometricInterpretation\",\n        0x0111: \"StripOffsets\",\n        0x0112: \"Orientation\",\n        0x0115: \"SamplesPerPixel\",\n        0x0116: \"RowsPerStrip\",\n        0x0117: \"StripByteCounts\",\n        0x011A: \"XResolution\",\n        0x011B: \"YResolution\",\n        0x011C: \"PlanarConfiguration\",\n        0x0128: \"ResolutionUnit\",\n        0x0201: \"JpegIFOffset\",    // When image format is JPEG, this value show offset to JPEG data stored.(aka \"ThumbnailOffset\" or \"JPEGInterchangeFormat\")\n        0x0202: \"JpegIFByteCount\", // When image format is JPEG, this value shows data size of JPEG image (aka \"ThumbnailLength\" or \"JPEGInterchangeFormatLength\")\n        0x0211: \"YCbCrCoefficients\",\n        0x0212: \"YCbCrSubSampling\",\n        0x0213: \"YCbCrPositioning\",\n        0x0214: \"ReferenceBlackWhite\"\n    };\n\n    var StringValues = EXIF.StringValues = {\n        ExposureProgram : {\n            0 : \"Not defined\",\n            1 : \"Manual\",\n            2 : \"Normal program\",\n            3 : \"Aperture priority\",\n            4 : \"Shutter priority\",\n            5 : \"Creative program\",\n            6 : \"Action program\",\n            7 : \"Portrait mode\",\n            8 : \"Landscape mode\"\n        },\n        MeteringMode : {\n            0 : \"Unknown\",\n            1 : \"Average\",\n            2 : \"CenterWeightedAverage\",\n            3 : \"Spot\",\n            4 : \"MultiSpot\",\n            5 : \"Pattern\",\n            6 : \"Partial\",\n            255 : \"Other\"\n        },\n        LightSource : {\n            0 : \"Unknown\",\n            1 : \"Daylight\",\n            2 : \"Fluorescent\",\n            3 : \"Tungsten (incandescent light)\",\n            4 : \"Flash\",\n            9 : \"Fine weather\",\n            10 : \"Cloudy weather\",\n            11 : \"Shade\",\n            12 : \"Daylight fluorescent (D 5700 - 7100K)\",\n            13 : \"Day white fluorescent (N 4600 - 5400K)\",\n            14 : \"Cool white fluorescent (W 3900 - 4500K)\",\n            15 : \"White fluorescent (WW 3200 - 3700K)\",\n            17 : \"Standard light A\",\n            18 : \"Standard light B\",\n            19 : \"Standard light C\",\n            20 : \"D55\",\n            21 : \"D65\",\n            22 : \"D75\",\n            23 : \"D50\",\n            24 : \"ISO studio tungsten\",\n            255 : \"Other\"\n        },\n        Flash : {\n            0x0000 : \"Flash did not fire\",\n            0x0001 : \"Flash fired\",\n            0x0005 : \"Strobe return light not detected\",\n            0x0007 : \"Strobe return light detected\",\n            0x0009 : \"Flash fired, compulsory flash mode\",\n            0x000D : \"Flash fired, compulsory flash mode, return light not detected\",\n            0x000F : \"Flash fired, compulsory flash mode, return light detected\",\n            0x0010 : \"Flash did not fire, compulsory flash mode\",\n            0x0018 : \"Flash did not fire, auto mode\",\n            0x0019 : \"Flash fired, auto mode\",\n            0x001D : \"Flash fired, auto mode, return light not detected\",\n            0x001F : \"Flash fired, auto mode, return light detected\",\n            0x0020 : \"No flash function\",\n            0x0041 : \"Flash fired, red-eye reduction mode\",\n            0x0045 : \"Flash fired, red-eye reduction mode, return light not detected\",\n            0x0047 : \"Flash fired, red-eye reduction mode, return light detected\",\n            0x0049 : \"Flash fired, compulsory flash mode, red-eye reduction mode\",\n            0x004D : \"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected\",\n            0x004F : \"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected\",\n            0x0059 : \"Flash fired, auto mode, red-eye reduction mode\",\n            0x005D : \"Flash fired, auto mode, return light not detected, red-eye reduction mode\",\n            0x005F : \"Flash fired, auto mode, return light detected, red-eye reduction mode\"\n        },\n        SensingMethod : {\n            1 : \"Not defined\",\n            2 : \"One-chip color area sensor\",\n            3 : \"Two-chip color area sensor\",\n            4 : \"Three-chip color area sensor\",\n            5 : \"Color sequential area sensor\",\n            7 : \"Trilinear sensor\",\n            8 : \"Color sequential linear sensor\"\n        },\n        SceneCaptureType : {\n            0 : \"Standard\",\n            1 : \"Landscape\",\n            2 : \"Portrait\",\n            3 : \"Night scene\"\n        },\n        SceneType : {\n            1 : \"Directly photographed\"\n        },\n        CustomRendered : {\n            0 : \"Normal process\",\n            1 : \"Custom process\"\n        },\n        WhiteBalance : {\n            0 : \"Auto white balance\",\n            1 : \"Manual white balance\"\n        },\n        GainControl : {\n            0 : \"None\",\n            1 : \"Low gain up\",\n            2 : \"High gain up\",\n            3 : \"Low gain down\",\n            4 : \"High gain down\"\n        },\n        Contrast : {\n            0 : \"Normal\",\n            1 : \"Soft\",\n            2 : \"Hard\"\n        },\n        Saturation : {\n            0 : \"Normal\",\n            1 : \"Low saturation\",\n            2 : \"High saturation\"\n        },\n        Sharpness : {\n            0 : \"Normal\",\n            1 : \"Soft\",\n            2 : \"Hard\"\n        },\n        SubjectDistanceRange : {\n            0 : \"Unknown\",\n            1 : \"Macro\",\n            2 : \"Close view\",\n            3 : \"Distant view\"\n        },\n        FileSource : {\n            3 : \"DSC\"\n        },\n\n        Components : {\n            0 : \"\",\n            1 : \"Y\",\n            2 : \"Cb\",\n            3 : \"Cr\",\n            4 : \"R\",\n            5 : \"G\",\n            6 : \"B\"\n        }\n    };\n\n    function addEvent(element, event, handler) {\n        if (element.addEventListener) {\n            element.addEventListener(event, handler, false);\n        } else if (element.attachEvent) {\n            element.attachEvent(\"on\" + event, handler);\n        }\n    }\n\n    function imageHasData(img) {\n        return !!(img.exifdata);\n    }\n\n\n    function base64ToArrayBuffer(base64, contentType) {\n        contentType = contentType || base64.match(/^data\\:([^\\;]+)\\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'\n        base64 = base64.replace(/^data\\:([^\\;]+)\\;base64,/gmi, '');\n        var binary = atob(base64);\n        var len = binary.length;\n        var buffer = new ArrayBuffer(len);\n        var view = new Uint8Array(buffer);\n        for (var i = 0; i < len; i++) {\n            view[i] = binary.charCodeAt(i);\n        }\n        return buffer;\n    }\n\n    function objectURLToBlob(url, callback) {\n        var http = new XMLHttpRequest();\n        http.open(\"GET\", url, true);\n        http.responseType = \"blob\";\n        http.onload = function(e) {\n            if (this.status == 200 || this.status === 0) {\n                callback(this.response);\n            }\n        };\n        http.send();\n    }\n\n    function getImageData(img, callback) {\n        function handleBinaryFile(binFile) {\n            var data = findEXIFinJPEG(binFile);\n            var iptcdata = findIPTCinJPEG(binFile);\n            var xmpdata= findXMPinJPEG(binFile);\n            img.exifdata = data || {};\n            img.iptcdata = iptcdata || {};\n            img.xmpdata = xmpdata || {};\n            if (callback) {\n                callback.call(img);\n            }\n        }\n\n        if (img.src) {\n            if (/^data\\:/i.test(img.src)) { // Data URI\n                var arrayBuffer = base64ToArrayBuffer(img.src);\n                handleBinaryFile(arrayBuffer);\n\n            } else if (/^blob\\:/i.test(img.src)) { // Object URL\n                var fileReader = new FileReader();\n                fileReader.onload = function(e) {\n                    handleBinaryFile(e.target.result);\n                };\n                objectURLToBlob(img.src, function (blob) {\n                    fileReader.readAsArrayBuffer(blob);\n                });\n            } else {\n                var http = new XMLHttpRequest();\n                http.onload = function() {\n                    if (this.status == 200 || this.status === 0) {\n                        handleBinaryFile(http.response);\n                    } else {\n                        throw \"Could not load image\";\n                    }\n                    http = null;\n                };\n                http.open(\"GET\", img.src, true);\n                http.responseType = \"arraybuffer\";\n                http.send(null);\n            }\n        } else if (self.FileReader && (img instanceof self.Blob || img instanceof self.File)) {\n            var fileReader = new FileReader();\n            fileReader.onload = function(e) {\n                if (debug) console.log(\"Got file of length \" + e.target.result.byteLength);\n                handleBinaryFile(e.target.result);\n            };\n\n            fileReader.readAsArrayBuffer(img);\n        }\n    }\n\n    function findEXIFinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength,\n            marker;\n\n        while (offset < length) {\n            if (dataView.getUint8(offset) != 0xFF) {\n                if (debug) console.log(\"Not a valid marker at offset \" + offset + \", found: \" + dataView.getUint8(offset));\n                return false; // not a valid marker, something is wrong\n            }\n\n            marker = dataView.getUint8(offset + 1);\n            if (debug) console.log(marker);\n\n            // we could implement handling for other markers here,\n            // but we're only looking for 0xFFE1 for EXIF data\n\n            if (marker == 225) {\n                if (debug) console.log(\"Found 0xFFE1 marker\");\n\n                return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);\n\n                // offset += 2 + file.getShortAt(offset+2, true);\n\n            } else {\n                offset += 2 + dataView.getUint16(offset+2);\n            }\n\n        }\n\n    }\n\n    function findIPTCinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength;\n\n\n        var isFieldSegmentStart = function(dataView, offset){\n            return (\n                dataView.getUint8(offset) === 0x38 &&\n                dataView.getUint8(offset+1) === 0x42 &&\n                dataView.getUint8(offset+2) === 0x49 &&\n                dataView.getUint8(offset+3) === 0x4D &&\n                dataView.getUint8(offset+4) === 0x04 &&\n                dataView.getUint8(offset+5) === 0x04\n            );\n        };\n\n        while (offset < length) {\n\n            if ( isFieldSegmentStart(dataView, offset )){\n\n                // Get the length of the name header (which is padded to an even number of bytes)\n                var nameHeaderLength = dataView.getUint8(offset+7);\n                if(nameHeaderLength % 2 !== 0) nameHeaderLength += 1;\n                // Check for pre photoshop 6 format\n                if(nameHeaderLength === 0) {\n                    // Always 4\n                    nameHeaderLength = 4;\n                }\n\n                var startOffset = offset + 8 + nameHeaderLength;\n                var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);\n\n                return readIPTCData(file, startOffset, sectionLength);\n\n                break;\n\n            }\n\n\n            // Not the marker, continue searching\n            offset++;\n\n        }\n\n    }\n    var IptcFieldMap = {\n        0x78 : 'caption',\n        0x6E : 'credit',\n        0x19 : 'keywords',\n        0x37 : 'dateCreated',\n        0x50 : 'byline',\n        0x55 : 'bylineTitle',\n        0x7A : 'captionWriter',\n        0x69 : 'headline',\n        0x74 : 'copyright',\n        0x0F : 'category'\n    };\n    function readIPTCData(file, startOffset, sectionLength){\n        var dataView = new DataView(file);\n        var data = {};\n        var fieldValue, fieldName, dataSize, segmentType, segmentSize;\n        var segmentStartPos = startOffset;\n        while(segmentStartPos < startOffset+sectionLength) {\n            if(dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos+1) === 0x02){\n                segmentType = dataView.getUint8(segmentStartPos+2);\n                if(segmentType in IptcFieldMap) {\n                    dataSize = dataView.getInt16(segmentStartPos+3);\n                    segmentSize = dataSize + 5;\n                    fieldName = IptcFieldMap[segmentType];\n                    fieldValue = getStringFromDB(dataView, segmentStartPos+5, dataSize);\n                    // Check if we already stored a value with this name\n                    if(data.hasOwnProperty(fieldName)) {\n                        // Value already stored with this name, create multivalue field\n                        if(data[fieldName] instanceof Array) {\n                            data[fieldName].push(fieldValue);\n                        }\n                        else {\n                            data[fieldName] = [data[fieldName], fieldValue];\n                        }\n                    }\n                    else {\n                        data[fieldName] = fieldValue;\n                    }\n                }\n\n            }\n            segmentStartPos++;\n        }\n        return data;\n    }\n\n\n\n    function readTags(file, tiffStart, dirStart, strings, bigEnd) {\n        var entries = file.getUint16(dirStart, !bigEnd),\n            tags = {},\n            entryOffset, tag,\n            i;\n\n        for (i=0;i<entries;i++) {\n            entryOffset = dirStart + i*12 + 2;\n            tag = strings[file.getUint16(entryOffset, !bigEnd)];\n            if (!tag && debug) console.log(\"Unknown tag: \" + file.getUint16(entryOffset, !bigEnd));\n            tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);\n        }\n        return tags;\n    }\n\n\n    function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {\n        var type = file.getUint16(entryOffset+2, !bigEnd),\n            numValues = file.getUint32(entryOffset+4, !bigEnd),\n            valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,\n            offset,\n            vals, val, n,\n            numerator, denominator;\n\n        switch (type) {\n            case 1: // byte, 8-bit unsigned int\n            case 7: // undefined, 8-bit byte, value depending on field\n                if (numValues == 1) {\n                    return file.getUint8(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 4 ? valueOffset : (entryOffset + 8);\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint8(offset + n);\n                    }\n                    return vals;\n                }\n\n            case 2: // ascii, 8-bit byte\n                offset = numValues > 4 ? valueOffset : (entryOffset + 8);\n                return getStringFromDB(file, offset, numValues-1);\n\n            case 3: // short, 16 bit int\n                if (numValues == 1) {\n                    return file.getUint16(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 2 ? valueOffset : (entryOffset + 8);\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint16(offset + 2*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 4: // long, 32 bit int\n                if (numValues == 1) {\n                    return file.getUint32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 5:    // rational = two long values, first is numerator, second is denominator\n                if (numValues == 1) {\n                    numerator = file.getUint32(valueOffset, !bigEnd);\n                    denominator = file.getUint32(valueOffset+4, !bigEnd);\n                    val = new Number(numerator / denominator);\n                    val.numerator = numerator;\n                    val.denominator = denominator;\n                    return val;\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        numerator = file.getUint32(valueOffset + 8*n, !bigEnd);\n                        denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);\n                        vals[n] = new Number(numerator / denominator);\n                        vals[n].numerator = numerator;\n                        vals[n].denominator = denominator;\n                    }\n                    return vals;\n                }\n\n            case 9: // slong, 32 bit signed int\n                if (numValues == 1) {\n                    return file.getInt32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 10: // signed rational, two slongs, first is numerator, second is denominator\n                if (numValues == 1) {\n                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);\n                    }\n                    return vals;\n                }\n        }\n    }\n\n    /**\n    * Given an IFD (Image File Directory) start offset\n    * returns an offset to next IFD or 0 if it's the last IFD.\n    */\n    function getNextIFDOffset(dataView, dirStart, bigEnd){\n        //the first 2bytes means the number of directory entries contains in this IFD\n        var entries = dataView.getUint16(dirStart, !bigEnd);\n\n        // After last directory entry, there is a 4bytes of data,\n        // it means an offset to next IFD.\n        // If its value is '0x00000000', it means this is the last IFD and there is no linked IFD.\n\n        return dataView.getUint32(dirStart + 2 + entries * 12, !bigEnd); // each entry is 12 bytes long\n    }\n\n    function readThumbnailImage(dataView, tiffStart, firstIFDOffset, bigEnd){\n        // get the IFD1 offset\n        var IFD1OffsetPointer = getNextIFDOffset(dataView, tiffStart+firstIFDOffset, bigEnd);\n\n        if (!IFD1OffsetPointer) {\n            // console.log('******** IFD1Offset is empty, image thumb not found ********');\n            return {};\n        }\n        else if (IFD1OffsetPointer > dataView.byteLength) { // this should not happen\n            // console.log('******** IFD1Offset is outside the bounds of the DataView ********');\n            return {};\n        }\n        // console.log('*******  thumbnail IFD offset (IFD1) is: %s', IFD1OffsetPointer);\n\n        var thumbTags = readTags(dataView, tiffStart, tiffStart + IFD1OffsetPointer, IFD1Tags, bigEnd)\n\n        // EXIF 2.3 specification for JPEG format thumbnail\n\n        // If the value of Compression(0x0103) Tag in IFD1 is '6', thumbnail image format is JPEG.\n        // Most of Exif image uses JPEG format for thumbnail. In that case, you can get offset of thumbnail\n        // by JpegIFOffset(0x0201) Tag in IFD1, size of thumbnail by JpegIFByteCount(0x0202) Tag.\n        // Data format is ordinary JPEG format, starts from 0xFFD8 and ends by 0xFFD9. It seems that\n        // JPEG format and 160x120pixels of size are recommended thumbnail format for Exif2.1 or later.\n\n        if (thumbTags['Compression']) {\n            // console.log('Thumbnail image found!');\n\n            switch (thumbTags['Compression']) {\n                case 6:\n                    // console.log('Thumbnail image format is JPEG');\n                    if (thumbTags.JpegIFOffset && thumbTags.JpegIFByteCount) {\n                    // extract the thumbnail\n                        var tOffset = tiffStart + thumbTags.JpegIFOffset;\n                        var tLength = thumbTags.JpegIFByteCount;\n                        thumbTags['blob'] = new Blob([new Uint8Array(dataView.buffer, tOffset, tLength)], {\n                            type: 'image/jpeg'\n                        });\n                    }\n                break;\n\n            case 1:\n                console.log(\"Thumbnail image format is TIFF, which is not implemented.\");\n                break;\n            default:\n                console.log(\"Unknown thumbnail image format '%s'\", thumbTags['Compression']);\n            }\n        }\n        else if (thumbTags['PhotometricInterpretation'] == 2) {\n            console.log(\"Thumbnail image format is RGB, which is not implemented.\");\n        }\n        return thumbTags;\n    }\n\n    function getStringFromDB(buffer, start, length) {\n        var outstr = \"\";\n        for (n = start; n < start+length; n++) {\n            outstr += String.fromCharCode(buffer.getUint8(n));\n        }\n        return outstr;\n    }\n\n    function readEXIFData(file, start) {\n        if (getStringFromDB(file, start, 4) != \"Exif\") {\n            if (debug) console.log(\"Not valid EXIF data! \" + getStringFromDB(file, start, 4));\n            return false;\n        }\n\n        var bigEnd,\n            tags, tag,\n            exifData, gpsData,\n            tiffOffset = start + 6;\n\n        // test for TIFF validity and endianness\n        if (file.getUint16(tiffOffset) == 0x4949) {\n            bigEnd = false;\n        } else if (file.getUint16(tiffOffset) == 0x4D4D) {\n            bigEnd = true;\n        } else {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x4949 or 0x4D4D)\");\n            return false;\n        }\n\n        if (file.getUint16(tiffOffset+2, !bigEnd) != 0x002A) {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x002A)\");\n            return false;\n        }\n\n        var firstIFDOffset = file.getUint32(tiffOffset+4, !bigEnd);\n\n        if (firstIFDOffset < 0x00000008) {\n            if (debug) console.log(\"Not valid TIFF data! (First offset less than 8)\", file.getUint32(tiffOffset+4, !bigEnd));\n            return false;\n        }\n\n        tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);\n\n        if (tags.ExifIFDPointer) {\n            exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);\n            for (tag in exifData) {\n                switch (tag) {\n                    case \"LightSource\" :\n                    case \"Flash\" :\n                    case \"MeteringMode\" :\n                    case \"ExposureProgram\" :\n                    case \"SensingMethod\" :\n                    case \"SceneCaptureType\" :\n                    case \"SceneType\" :\n                    case \"CustomRendered\" :\n                    case \"WhiteBalance\" :\n                    case \"GainControl\" :\n                    case \"Contrast\" :\n                    case \"Saturation\" :\n                    case \"Sharpness\" :\n                    case \"SubjectDistanceRange\" :\n                    case \"FileSource\" :\n                        exifData[tag] = StringValues[tag][exifData[tag]];\n                        break;\n\n                    case \"ExifVersion\" :\n                    case \"FlashpixVersion\" :\n                        exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);\n                        break;\n\n                    case \"ComponentsConfiguration\" :\n                        exifData[tag] =\n                            StringValues.Components[exifData[tag][0]] +\n                            StringValues.Components[exifData[tag][1]] +\n                            StringValues.Components[exifData[tag][2]] +\n                            StringValues.Components[exifData[tag][3]];\n                        break;\n                }\n                tags[tag] = exifData[tag];\n            }\n        }\n\n        if (tags.GPSInfoIFDPointer) {\n            gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);\n            for (tag in gpsData) {\n                switch (tag) {\n                    case \"GPSVersionID\" :\n                        gpsData[tag] = gpsData[tag][0] +\n                            \".\" + gpsData[tag][1] +\n                            \".\" + gpsData[tag][2] +\n                            \".\" + gpsData[tag][3];\n                        break;\n                }\n                tags[tag] = gpsData[tag];\n            }\n        }\n\n        // extract thumbnail\n        tags['thumbnail'] = readThumbnailImage(file, tiffOffset, firstIFDOffset, bigEnd);\n\n        return tags;\n    }\n\n   function findXMPinJPEG(file) {\n\n        if (!('DOMParser' in self)) {\n            // console.warn('XML parsing not supported without DOMParser');\n            return;\n        }\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n           if (debug) console.log(\"Not a valid JPEG\");\n           return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength,\n            dom = new DOMParser();\n\n        while (offset < (length-4)) {\n            if (getStringFromDB(dataView, offset, 4) == \"http\") {\n                var startOffset = offset - 1;\n                var sectionLength = dataView.getUint16(offset - 2) - 1;\n                var xmpString = getStringFromDB(dataView, startOffset, sectionLength)\n                var xmpEndIndex = xmpString.indexOf('xmpmeta>') + 8;\n                xmpString = xmpString.substring( xmpString.indexOf( '<x:xmpmeta' ), xmpEndIndex );\n\n                var indexOfXmp = xmpString.indexOf('x:xmpmeta') + 10\n                //Many custom written programs embed xmp/xml without any namespace. Following are some of them.\n                //Without these namespaces, XML is thought to be invalid by parsers\n                xmpString = xmpString.slice(0, indexOfXmp)\n                            + 'xmlns:Iptc4xmpCore=\"http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/\" '\n                            + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n                            + 'xmlns:tiff=\"http://ns.adobe.com/tiff/1.0/\" '\n                            + 'xmlns:plus=\"http://schemas.android.com/apk/lib/com.google.android.gms.plus\" '\n                            + 'xmlns:ext=\"http://www.gettyimages.com/xsltExtension/1.0\" '\n                            + 'xmlns:exif=\"http://ns.adobe.com/exif/1.0/\" '\n                            + 'xmlns:stEvt=\"http://ns.adobe.com/xap/1.0/sType/ResourceEvent#\" '\n                            + 'xmlns:stRef=\"http://ns.adobe.com/xap/1.0/sType/ResourceRef#\" '\n                            + 'xmlns:crs=\"http://ns.adobe.com/camera-raw-settings/1.0/\" '\n                            + 'xmlns:xapGImg=\"http://ns.adobe.com/xap/1.0/g/img/\" '\n                            + 'xmlns:Iptc4xmpExt=\"http://iptc.org/std/Iptc4xmpExt/2008-02-29/\" '\n                            + xmpString.slice(indexOfXmp)\n\n                var domDocument = dom.parseFromString( xmpString, 'text/xml' );\n                return xml2Object(domDocument);\n            } else{\n             offset++;\n            }\n        }\n    }\n\n    function xml2Object(xml) {\n        try {\n            var obj = {};\n            if (xml.children.length > 0) {\n              for (var i = 0; i < xml.children.length; i++) {\n                var item = xml.children.item(i);\n                var attributes = item.attributes;\n                for(var idx in attributes) {\n                    var itemAtt = attributes[idx];\n                    var dataKey = itemAtt.nodeName;\n                    var dataValue = itemAtt.nodeValue;\n\n                    if(dataKey !== undefined) {\n                        obj[dataKey] = dataValue;\n                    }\n                }\n                var nodeName = item.nodeName;\n\n                if (typeof (obj[nodeName]) == \"undefined\") {\n                  obj[nodeName] = xml2json(item);\n                } else {\n                  if (typeof (obj[nodeName].push) == \"undefined\") {\n                    var old = obj[nodeName];\n\n                    obj[nodeName] = [];\n                    obj[nodeName].push(old);\n                  }\n                  obj[nodeName].push(xml2json(item));\n                }\n              }\n            } else {\n              obj = xml.textContent;\n            }\n            return obj;\n          } catch (e) {\n              console.log(e.message);\n          }\n    }\n\n    EXIF.getData = function(img, callback) {\n        if ((self.Image && img instanceof self.Image)\n            || (self.HTMLImageElement && img instanceof self.HTMLImageElement)\n            && !img.complete)\n            return false;\n\n        if (!imageHasData(img)) {\n            getImageData(img, callback);\n        } else {\n            if (callback) {\n                callback.call(img);\n            }\n        }\n        return true;\n    }\n\n    EXIF.getTag = function(img, tag) {\n        if (!imageHasData(img)) return;\n        return img.exifdata[tag];\n    }\n    \n    EXIF.getIptcTag = function(img, tag) {\n        if (!imageHasData(img)) return;\n        return img.iptcdata[tag];\n    }\n\n    EXIF.getAllTags = function(img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.exifdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    }\n    \n    EXIF.getAllIptcTags = function(img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.iptcdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    }\n\n    EXIF.pretty = function(img) {\n        if (!imageHasData(img)) return \"\";\n        var a,\n            data = img.exifdata,\n            strPretty = \"\";\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                if (typeof data[a] == \"object\") {\n                    if (data[a] instanceof Number) {\n                        strPretty += a + \" : \" + data[a] + \" [\" + data[a].numerator + \"/\" + data[a].denominator + \"]\\r\\n\";\n                    } else {\n                        strPretty += a + \" : [\" + data[a].length + \" values]\\r\\n\";\n                    }\n                } else {\n                    strPretty += a + \" : \" + data[a] + \"\\r\\n\";\n                }\n            }\n        }\n        return strPretty;\n    }\n\n    EXIF.readFromBinaryFile = function(file) {\n        return findEXIFinJPEG(file);\n    }\n\n    if (typeof define === 'function' && define.amd) {\n        define('exif-js', [], function() {\n            return EXIF;\n        });\n    }\n}.call(this));\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_exif-js@2.2.1@exif-js/exif.js\n// module id = 268\n// module chunks = 8 18 21 22","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n  \r\nimport Exif from 'exif-js'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      headerImage: '', picValue: '',\r\n    }\r\n  },\r\n  mounted() {\r\n  },\r\n  methods: {\r\n    upload(e) {\r\n      let files = e.target.files || e.dataTransfer.files;\r\n      if (!files.length) return;\r\n      this.picValue = files[0];\r\n      this.imgPreview(this.picValue);\r\n    },\r\n    imgPreview(file) {\r\n      let self = this;\r\n      let Orientation;\r\n      //去获取拍照时的信息，解决拍出来的照片旋转问题  \r\n      Exif.getData(file, function () {\r\n        Orientation = Exif.getTag(this, 'Orientation');\r\n      });\r\n      // 看支持不支持FileReader  \r\n      if (!file || !window.FileReader) return;\r\n\r\n      if (/^image/.test(file.type)) {\r\n        // 创建一个reader  \r\n        let reader = new FileReader();\r\n        // 将图片2将转成 base64 格式  \r\n        reader.readAsDataURL(file);\r\n        // 读取成功后的回调  \r\n        reader.onloadend = function () {\r\n          let result = this.result;\r\n          let img = new Image();\r\n          img.src = result;\r\n          //判断图片是否大于100K,是就直接上传，反之压缩图片  \r\n          if (this.result.length <= (100 * 1024)) {\r\n            self.headerImage = this.result;\r\n            self.postImg();\r\n          } else {\r\n            img.onload = function () {\r\n              let data = self.compress(img, Orientation);\r\n              self.headerImage = data;\r\n              self.postImg();\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    postImg() {\r\n      //这里写接口  \r\n    },\r\n    rotateImg(img, direction, canvas) {\r\n      //最小与最大旋转方向，图片旋转4次后回到原方向      \r\n      const min_step = 0;\r\n      const max_step = 3;\r\n      if (img == null) return;\r\n      //img的高度和宽度不能在img元素隐藏后获取，否则会出错      \r\n      let height = img.height;\r\n      let width = img.width;\r\n      let step = 2;\r\n      if (step == null) {\r\n        step = min_step;\r\n      }\r\n      if (direction == 'right') {\r\n        step++;\r\n        //旋转到原位置，即超过最大值      \r\n        step > max_step && (step = min_step);\r\n      } else {\r\n        step--;\r\n        step < min_step && (step = max_step);\r\n      }\r\n      //旋转角度以弧度值为参数      \r\n      let degree = step * 90 * Math.PI / 180;\r\n      let ctx = canvas.getContext('2d');\r\n      switch (step) {\r\n        case 0:\r\n          canvas.width = width;\r\n          canvas.height = height;\r\n          ctx.drawImage(img, 0, 0);\r\n          break;\r\n        case 1:\r\n          canvas.width = height;\r\n          canvas.height = width;\r\n          ctx.rotate(degree);\r\n          ctx.drawImage(img, 0, -height);\r\n          break;\r\n        case 2:\r\n          canvas.width = width;\r\n          canvas.height = height;\r\n          ctx.rotate(degree);\r\n          ctx.drawImage(img, -width, -height);\r\n          break;\r\n        case 3:\r\n          canvas.width = height;\r\n          canvas.height = width;\r\n          ctx.rotate(degree);\r\n          ctx.drawImage(img, -width, 0);\r\n          break;\r\n      }\r\n    },\r\n    compress(img, Orientation) {\r\n      let canvas = document.createElement(\"canvas\");\r\n      let ctx = canvas.getContext('2d');\r\n      //瓦片canvas  \r\n      let tCanvas = document.createElement(\"canvas\");\r\n      let tctx = tCanvas.getContext(\"2d\");\r\n      let initSize = img.src.length;\r\n      let width = img.width;\r\n      let height = img.height;\r\n      //如果图片大于四百万像素，计算压缩比并将大小压至400万以下  \r\n      let ratio;\r\n      if ((ratio = width * height / 4000000) > 1) {\r\n        console.log(\"大于400万像素\")\r\n        ratio = Math.sqrt(ratio);\r\n        width /= ratio;\r\n        height /= ratio;\r\n      } else {\r\n        ratio = 1;\r\n      }\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      //        铺底色  \r\n      ctx.fillStyle = \"#fff\";\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      //如果图片像素大于100万则使用瓦片绘制  \r\n      let count;\r\n      if ((count = width * height / 1000000) > 1) {\r\n        console.log(\"超过100W像素\");\r\n        count = ~~(Math.sqrt(count) + 1); //计算要分成多少块瓦片  \r\n        //            计算每块瓦片的宽和高  \r\n        let nw = ~~(width / count);\r\n        let nh = ~~(height / count);\r\n        tCanvas.width = nw;\r\n        tCanvas.height = nh;\r\n        for (let i = 0; i < count; i++) {\r\n          for (let j = 0; j < count; j++) {\r\n            tctx.drawImage(img, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, 0, 0, nw, nh);\r\n            ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);\r\n          }\r\n        }\r\n      } else {\r\n        ctx.drawImage(img, 0, 0, width, height);\r\n      }\r\n      //修复ios上传图片的时候 被旋转的问题  \r\n      if (Orientation != \"\" && Orientation != 1) {\r\n        switch (Orientation) {\r\n          case 6://需要顺时针（向左）90度旋转  \r\n            this.rotateImg(img, 'left', canvas);\r\n            break;\r\n          case 8://需要逆时针（向右）90度旋转  \r\n            this.rotateImg(img, 'right', canvas);\r\n            break;\r\n          case 3://需要180度旋转  \r\n            this.rotateImg(img, 'right', canvas);//转两次  \r\n            this.rotateImg(img, 'right', canvas);\r\n            break;\r\n        }\r\n      }\r\n      //进行最小压缩  \r\n      let ndata = canvas.toDataURL('image/jpeg', 0.1);\r\n      console.log('压缩前：' + initSize);\r\n      console.log('压缩后：' + ndata.length);\r\n      console.log('压缩率：' + ~~(100 * (initSize - ndata.length) / initSize) + \"%\");\r\n      console.log(this.headerImage)\r\n      console.log(this.picValue)\r\n      tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0;\r\n      return ndata;\r\n    },\r\n  }\r\n}  \r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/imgTest.vue","exports = module.exports = require(\"../../node_modules/_css-loader@0.28.4@css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \"*{margin:0;padding:0}.show{width:100px;height:100px;position:relative;border-radius:50%;border:1px solid #d5d5d5}.picture,.show{overflow:hidden}.picture{width:100%;height:100%;background-position:50%;background-repeat:no-repeat;background-size:cover}\", \"\", {\"version\":3,\"sources\":[\"C:/wamp/www/jun/weixin/my-wx/src/components/imgTest.vue\"],\"names\":[],\"mappings\":\"AACA,EACE,SAAU,AACV,SAAW,CACZ,AACD,MACE,YAAa,AACb,aAAc,AAEd,kBAAmB,AACnB,kBAAmB,AACnB,wBAA0B,CAC3B,AACD,eALE,eAAiB,CAYlB,AAPD,SACE,WAAY,AACZ,YAAa,AAEb,wBAAmC,AACnC,4BAA6B,AAC7B,qBAAuB,CACxB\",\"file\":\"imgTest.vue\",\"sourcesContent\":[\"\\n* {\\n  margin: 0;\\n  padding: 0;\\n}\\n.show {\\n  width: 100px;\\n  height: 100px;\\n  overflow: hidden;\\n  position: relative;\\n  border-radius: 50%;\\n  border: 1px solid #d5d5d5;\\n}\\n.picture {\\n  width: 100%;\\n  height: 100%;\\n  overflow: hidden;\\n  background-position: center center;\\n  background-repeat: no-repeat;\\n  background-size: cover;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_css-loader@0.28.4@css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/_vue-loader@12.2.2@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-0b5fd1a2\",\"scoped\":false,\"hasInlineConfig\":false}!./~/_vux-loader@1.1.2@vux-loader/src/style-loader.js!./~/_vue-loader@12.2.2@vue-loader/lib/selector.js?type=styles&index=0!./src/components/imgTest.vue\n// module id = 376\n// module chunks = 21","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/_css-loader@0.28.4@css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../node_modules/_vue-loader@12.2.2@vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-0b5fd1a2\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/_vux-loader@1.1.2@vux-loader/src/style-loader.js!../../node_modules/_vue-loader@12.2.2@vue-loader/lib/selector.js?type=styles&index=0!./imgTest.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/_vue-style-loader@3.0.1@vue-style-loader/lib/addStylesClient.js\")(\"50203d40\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_extract-text-webpack-plugin@2.1.2@extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/_vue-style-loader@3.0.1@vue-style-loader!./~/_css-loader@0.28.4@css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/_vue-loader@12.2.2@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-0b5fd1a2\",\"scoped\":false,\"hasInlineConfig\":false}!./~/_vux-loader@1.1.2@vux-loader/src/style-loader.js!./~/_vue-loader@12.2.2@vue-loader/lib/selector.js?type=styles&index=0!./src/components/imgTest.vue\n// module id = 405\n// module chunks = 21","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('div', {\n    staticStyle: {\n      \"padding\": \"20px\"\n    }\n  }, [_c('div', {\n    staticClass: \"show\"\n  }, [_c('div', {\n    staticClass: \"picture\",\n    style: ('backgroundImage:url(' + _vm.headerImage + ')')\n  })]), _vm._v(\" \"), _c('div', {\n    staticStyle: {\n      \"margin-top\": \"20px\"\n    }\n  }, [_c('input', {\n    attrs: {\n      \"type\": \"file\",\n      \"id\": \"upload\",\n      \"multiple\": \"\",\n      \"accept\": \"image\"\n    },\n    on: {\n      \"change\": _vm.upload\n    }\n  }), _vm._v(\" \"), _c('label', {\n    attrs: {\n      \"for\": \"upload\"\n    }\n  })])])])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_vue-loader@12.2.2@vue-loader/lib/template-compiler?{\"id\":\"data-v-0b5fd1a2\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/_vux-loader@1.1.2@vux-loader/src/before-template-compiler-loader.js!./~/_vux-loader@1.1.2@vux-loader/src/template-loader.js!./~/_vue-loader@12.2.2@vue-loader/lib/selector.js?type=template&index=0!./src/components/imgTest.vue\n// module id = 434\n// module chunks = 21"],"sourceRoot":""}